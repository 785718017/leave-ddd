/**
 * 领域服务DomainService
 *
 * 主要职责：
 *
 * 1. 对外提供访问聚合的接口，是聚合的唯一入口。
 * 2. 与聚合根一起，完成聚合根的完整生命周期的维护。
 * 2. 与基础设施层交互（获取数据，保存数据）。
 * 3. 根据业务逻辑，生成领域事件，并保存领域事件到基础设施层。
 * 4. 对于聚合根无法处理的逻辑，由领域服务配合实现。
 *
 * 说明：
 * 1. 为了保持聚合根仅维护自身内存数据生命周期的原则，而将与基础设施的交互、领域事件处理放在了领域服务中。
 * 2. 领域服务是一种过程式写法，这也给架构的演进留下了空间：开发人员可以在贫血模型与充血模型中寻求平衡，容错性更强。
 * 3. 尽量将领域内逻辑在聚合根内实现，而非写在领域服务中。
 * 4. 目前，我们使用充血模型实现聚合根，聚合根更新或领域服务每次都调用repository接口保存完整的聚合根。
 * 5. 对于保存聚合根时出现的并发情况，使用乐观锁（version字段）来处理。
 *
 * 关于聚合根获取、更新及保存特别说明：
 *
 * 在DDD架构中，repository负责重建完整的聚合根，并负责存储完整的聚合根。所以领域服务一般的流程是：
 * 从repository查出聚合根-->根据业务逻辑更新聚合根状态-->调用repository保存更新后的聚合根。
 *
 * 也即是说，即使是只修改聚合根内的某一个字段，也需要将完整的聚合根先重建出来，然后在聚合根内部修改，
 * 然后将聚合根所有的字段再重新更新一遍。
 *
 * 这会和以前的MVC模式有很大不同，开发人员可能不习惯。造成这种现象的原因主要是聚合根的更新逻辑是封装在聚合根内部的，
 * 外部无法获知聚合根哪些字段或实体被更新，因而只得保存整个聚合根。
 *
 * PS: 如果聚合内的实现采用贫血模型，即聚合内的所有业务逻辑都再领域服务中，则可以知道哪些字段、实体被更新，通过领域服务来保证
 *     聚合根的生命周期和数据的一致性。这也是domainService的存在所预留出来的一种灵活性。
 */
package com.yeahzee.lab.framework.domain.aggregate.service;